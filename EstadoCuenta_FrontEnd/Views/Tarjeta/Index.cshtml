@model EstadoCuenta_FrontEnd.Models.DetalleCuentaViewModel

@{
    ViewData["Title"] = "Estado Cuenta";
}

<!-- Contenedor principal -->
<div class="container mt-5">

    <!-- Título de la página -->
    <div class="text-center mb-4">
        <h1 class="display-4 text-primary">@ViewData["Title"]</h1>
    </div>

    <!-- Estado de la Cuenta -->
    <div class="card mb-4 shadow-sm border-info">
        <div class="card-header bg-info text-white">
            <h3>Estado de la Cuenta</h3>
        </div>
        <div class="row">
            <div class="col-md-6">
                <a class="btn btn-sm btn-secondary no-export" id="exportPdfClick">Exportar</a>
            </div>
            <div class="col-md-6">
                <a class="btn btn-sm btn-secondary no-export" asp-action="ExportarEstadoCuenta" asp-controller="Tarjeta">Exportar Excel</a>
            </div>
        </div>
        <div class="card-body" id="estado-cuenta-export">
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Nombre:</strong> @Model.estadoCuenta.Nombre @Model.estadoCuenta.Apellido</p>
                    <p><strong>Tarjeta ID:</strong> @Model.estadoCuenta.TarjetaID</p>
                    <p><strong>Numero de Tarjeta:</strong> @Model.estadoCuenta.NumeroTarjeta</p>
                </div>
                <div class="col-md-6">
                    <p><strong>Saldo Actual:</strong> @Model.estadoCuenta.SaldoActual</p>
                    <p><strong>Límite de Crédito:</strong> @Model.estadoCuenta.LimiteCredito</p>
                    <p><strong>Saldo Disponible:</strong> @Model.estadoCuenta.SaldoDisponible</p>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Compras Mes Actual:</strong> @Model.estadoCuenta.ComprasMesActual</p>
                    <p><strong>Compras Mes Anterior:</strong> @Model.estadoCuenta.ComprasMesAnterior</p>
                    <p><strong>Interés Bonificable:</strong> @Model.estadoCuenta.InteresBonificable</p>
                </div>
                <div class="col-md-6">
                    <p><strong>Cuota Mínima:</strong> @Model.estadoCuenta.CuotaMinima</p>
                    <p><strong>Monto Total a Pagar:</strong> @Model.estadoCuenta.MontoTotalPagar</p>
                    <p><strong>Pago Contado con Intereses:</strong> @Model.estadoCuenta.PagoContadoConIntereses</p>
                </div>
            </div>
        </div>
        <hr />
        <a class="btn btn-primary no-export" asp-area="" asp-controller="Tarjeta" asp-action="InsertarPago">Agregar Pago</a>
    </div>

    <!-- Transacciones Mensuales -->
    <div class="card mb-4 shadow-sm border-primary">
        <div class="card-header bg-primary text-white">
            <h3>Transacciones Mensuales</h3>
        </div>
        <div class="card-body">
            @if (Model.transaccionesMensuales != null && Model.transaccionesMensuales.Any())
            {
                <table class="table table-striped table-bordered table-hover">
                    <thead class="thead-dark">
                        <tr>
                            <th>Tipo Transacción</th>
                            <th>Fecha</th>
                            <th>Descripción</th>
                            <th>Monto</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaccion in Model.transaccionesMensuales)
                        {
                            <tr>
                                <td>@transaccion.TipoTransaccion</td>
                                <td>@transaccion.Fecha.ToShortDateString()</td>
                                <td>@transaccion.Descripcion</td>
                                <td>@transaccion.Monto</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-muted">No se encontraron transacciones mensuales.</p>
            }
        </div>
    </div>

    <!-- Compras -->
    <div class="card mb-4 shadow-sm border-success">
        <div class="card-header bg-success text-white">
            <h3>Compras</h3>
        </div>
        <hr />
        <a class="btn btn-primary no-export" asp-area="" asp-controller="Tarjeta" asp-action="InsertarCompra">Agregar Compra</a>
        <div class="card-body">
            @if (Model.compras != null && Model.compras.Any())
            {
                <table class="table table-striped table-bordered table-hover">
                    <thead class="thead-dark">
                        <tr>
                            <th>Descripción</th>
                            <th>Fecha</th>
                            <th>Monto</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var compra in Model.compras)
                        {
                            <tr>
                                <td>@compra.Descripcion</td>
                                <td>@compra.Fecha.ToShortDateString()</td>
                                <td>@compra.Monto</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-muted">No se encontraron compras.</p>
            }
        </div>
    </div>

</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

<script>
    document.getElementById("exportPdfClick").addEventListener("click", () => {
        // Ocultar temporalmente los elementos que no se exportarán
        document.querySelectorAll(".no-export").forEach(el => el.style.display = "none");

        // Seleccionar el contenedor principal
        const content = document.querySelector(".container");

        // Capturar el contenido con html2canvas
        html2canvas(content, { scale: 2 }).then(canvas => {
            const imgData = canvas.toDataURL("image/png");

            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF("p", "mm", "a4");

            // Configurar las dimensiones del PDF
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = (canvas.height * pdfWidth) / canvas.width;

            pdf.addImage(imgData, "PNG", 0, 0, pdfWidth, pdfHeight);
            pdf.save("estado-cuenta.pdf");
        }).finally(() => {
            // Restaurar los elementos ocultos después de la exportación
            document.querySelectorAll(".no-export").forEach(el => el.style.display = "");
        });
    });
</script>
